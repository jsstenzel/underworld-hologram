%{
#ifdef __cplusplus
extern "C" {
#endif

#include <stdio.h>
#define YYSTYPE char*
#define YY_CTX_LOCAL 1

typedef struct {
  char* action;
  char* targets;
  char* objects;
  bool flagEmpty;
  bool flagKeyword;
} expression;

expression g_expression;
char* g_inputString;
int g_inputPos;

void free_expression() {
  free(g_expression.action);
  free(g_expression.targets);
  free(g_expression.objects);
}

void clear_expression() {
  free_expression();
  g_expression.action = (YYSTYPE)malloc(1);
  g_expression.targets = (YYSTYPE)malloc(1);
  g_expression.objects = (YYSTYPE)malloc(1);
  g_expression.action[0] = '\0';
  g_expression.targets[0] = '\0';
  g_expression.objects[0] = '\0';
  g_expression.flagEmpty = false;
  g_expression.flagKeyword = false;
}

void expression_set_action(YYSTYPE str, int len) {
  free(g_expression.action);
  g_expression.action = (YYSTYPE)malloc(len + 1);
  strcpy(g_expression.action, str);
}

void expression_add_target(YYSTYPE str, int len) {
  int oldLen = strlen(g_expression.targets);

  YYSTYPE tmp = (YYSTYPE)realloc(g_expression.targets, oldLen + len + 1);
  if (tmp == NULL) {
    printf("realloc error\n");
    return;
  }
  g_expression.targets = tmp;
  
  memcpy(g_expression.targets + oldLen, str, len);
  g_expression.targets[oldLen + len - 1] = ';';
  g_expression.targets[oldLen + len] = '\0';
}

void expression_add_object(YYSTYPE str, int len) {
  int oldLen = strlen(g_expression.objects);

  YYSTYPE tmp = (YYSTYPE)realloc(g_expression.objects, oldLen + len + 1);
  if (tmp == NULL) {
    printf("realloc error\n");
    return;
  }
  g_expression.objects = tmp;
  
  memcpy(g_expression.objects + oldLen, str, len);
  g_expression.objects[oldLen + len - 1] = ';';
  g_expression.objects[oldLen + len] = '\0';
}

%}

Statement     = (- Expression End)
              | ('' End)                                            { g_expression.flagEmpty = true; }
Expression    = (Action Preposition? Object+ (Positional Preposition? Target+)?)                    
              | w:Word                                              { expression_set_action(w, yyleng+1); free(w); g_expression.flagKeyword = true; }
Object        = !Preposition !Positional w:Word                     { expression_add_object(w, yyleng+1); free(w); }
Target        = !Preposition !Positional w:Word                     { expression_add_target(w, yyleng+1); free(w); }
Action        = w:Word                                              { expression_set_action(w, yyleng+1); free(w); }
Word          = < [a-z]+ > -                                        { $$ = strdup(yytext); }
Preposition   = ('the' | 'a') -
Positional    = ('on' | 'in' | 'inside' | 'under' | 'above' | 'from') -
End           = '\n' | '\r\n' | '\r' | ';'
-             = [ \t]*

%%

#ifdef __cplusplus
}
#endif
